name: Monthly Backup

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'  # Runs at 00:00 UTC on the 1st of every month

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo with submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set date variables
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

    - name: Install zstd
      run: sudo apt-get update && sudo apt-get install -y zstd

    - name: Create tar.zst backup excluding .git folders
      run: |
        tar --exclude='.git' --exclude='.gitmodules' --exclude='.github' --exclude='repo-backup-${{ steps.date.outputs.date }}.tar.zst' \
            -I 'zstd -T0 -19' \
            -cf "repo-backup-${{ steps.date.outputs.date }}.tar.zst" .

    - name: Upload backup artifact
      uses: actions/upload-artifact@v4
      with:
        name: repo-backup
        path: repo-backup-${{ steps.date.outputs.date }}.tar.zst

    - name: Check if archive > 2GB and split if needed
      id: check_size
      run: |
        file="repo-backup-${{ steps.date.outputs.date }}.tar.zst"
        max_size=$((2 * 1024 * 1024 * 1024))  # 2GB in bytes
        actual_size=$(stat -c%s "$file")
        if [ "$actual_size" -ge "$max_size" ]; then
          split -b 1996M "$file" "${file}."
          echo "split=true" >> "$GITHUB_OUTPUT"
        else
          echo "split=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: "Backup ${{ steps.date.outputs.date }}"
        tag_name: "backup-${{ steps.date.outputs.date }}"
        body: |
          Automated backup for ${{ steps.date.outputs.date }}.
          $(if [[ "${{ steps.check_size.outputs.split }}" == "true" ]]; then echo "Note: Archive was split due to size >2GB."; fi)
        files: |
          ${{ steps.check_size.outputs.split == 'true' && format('repo-backup-{0}.tar.zst.*', steps.date.outputs.date) || format('repo-backup-{0}.tar.zst', steps.date.outputs.date) }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
